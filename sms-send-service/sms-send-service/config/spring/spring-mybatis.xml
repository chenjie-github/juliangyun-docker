<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
						   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						   http://www.springframework.org/schema/context
						   http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:property-placeholder location="classpath:config/database.properties" ignore-unresolvable="true"/>

	<!-- 自动注入@Service bean -->
    <context:component-scan base-package="**.services" />

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${dataSource.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${dataSource.maxActive}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${dataSource.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${dataSource.maxWait}" />

		<property name="validationQuery" value="${dataSource.validationQuery}" />
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
		<property name="testOnReturn" value="${dataSource.testOnReturn}" />
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />

		<!-- 打开removeAbandoned功能 -->
		<!--
            配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。 在上面的配置中，如果连接超过30分钟未关闭，
            就会被强行回收，并且日志记录连接申请时的调用堆栈。
        -->
		<property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${dataSource.logAbandoned}" />
	</bean>

	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping目录, 省掉mybatis-config.xml里的手工配置 -->
        <property name="mapperLocations" value="classpath*:config/mybatis/**/*.xml" />
    </bean>

	<!-- 数据库查询基类 -->
	<bean id="commonServices" class="cog.mybatis.database.services.mybatis.MySqlCommonServices" >
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

    <!-- 配置扫描器  它的子包下的所有映射接口类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="**.mapper.**" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置Spring的事务管理器  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager" />


	<!--&lt;!&ndash; 拦截器方式配置事物 &ndash;&gt;-->
    <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="add*" propagation="REQUIRED" />-->
            <!--<tx:method name="tx_*" propagation="REQUIRED" />-->
            <!--<tx:method name="append*" propagation="REQUIRED" />-->
            <!--<tx:method name="insert*" propagation="REQUIRED" />-->
            <!--<tx:method name="save*" propagation="REQUIRED" />-->
            <!--<tx:method name="update*" propagation="REQUIRED" />-->
            <!--<tx:method name="modify*" propagation="REQUIRED" />-->
            <!--<tx:method name="edit*" propagation="REQUIRED" />-->
            <!--<tx:method name="delete*" propagation="REQUIRED" />-->
            <!--<tx:method name="remove*" propagation="REQUIRED" />-->
            <!--<tx:method name="repair" propagation="REQUIRED" />-->
            <!--<tx:method name="delAndRepair" propagation="REQUIRED" />-->

            <!--<tx:method name="get*" propagation="SUPPORTS" />-->
            <!--<tx:method name="find*" propagation="SUPPORTS" />-->
            <!--<tx:method name="load*" propagation="SUPPORTS" />-->
            <!--<tx:method name="search*" propagation="SUPPORTS" />-->
            <!--<tx:method name="datagrid*" propagation="SUPPORTS" />-->

            <!--<tx:method name="*" propagation="SUPPORTS" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="transactionPointcut" expression="execution(* *.tx_*(..))" />-->
        <!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />-->
    <!--</aop:config>-->

</beans>